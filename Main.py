'''Redaccion de Ejercicios Navide√±os'''
import random
import re

print('''1. √Årbol de Navidad''')


def Arbol_navidad(numero_n):
    for i in range(numero_n):
        print(' ' * (numero_n - i - 1) + '*' * (2 * i + 1))

        # Parte inferior del rombo
    print("   |||")


Arbol_navidad(5)

print("2. Lista de regalos")
lista = ("Reloj Inteligente", "Revista", "Rompecabezas", "Ri√±onera"
         , "Ropa personalizada", "Ramo de flores", "Juego de mesa"
         , "Ribro", "Bono regalo")


def filtrar_regalos(lista: tuple):
    for encontrar in lista:
        if encontrar.startswith("R"):
            print("Regalo: ", encontrar)


filtrar_regalos(lista)
bolitas = (5, 4, 2, 1, 12, 3, 51, 2, 5, 2, 1, 4, 7, 5, 3, 2, 4, 3, 4, 3, 6, 5, 6, 7, 7, 77, 7876)
print("3. Contando bolas de nieve")


def contar_bolas(lista) -> int:
    contadorcito = 0
    for bolitas in lista:
        if bolitas >= 5:
            contadorcito = contadorcito + 1
    return contadorcito


print("Hay", contar_bolas(bolitas), "bolas de nieve gigantescas")
lista_nombre = ("Pepe", "Antonio", "Jose", "Paco", "Fran", "Jaime")
lista_premios = (1000, 1233, 5, 1.12, 3213, 0)
print("4. Sorteo de Navidad")


def sorteo_navidad(lista_nombre, lista_premios):
    lista_resultado = []
    for i in range(0, 6):
        random.shuffle(lista_resultado)
        lista_resultado.append((lista_nombre[i], lista_premios[i]))
    return lista_resultado


print(sorteo_navidad(lista_nombre, lista_premios))
'''Crea una funci√≥n llamada cuenta_regresiva que reciba un n√∫mero n y haga una
cuenta regresiva desde ese n√∫mero hasta 1. Por cada n√∫mero, imprime "ÔøΩÔøΩÔøΩÔøΩÔøΩ" si es
divisible por 3, "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ" si es divisible por 5, y "ÔøΩÔøΩÔøΩÔøΩ" si es divisible por ambos.'''

print("5. Cuenta regresiva de A√±o Nuevo")


def cuenta_regresiva(numero):
    for n in range(numero, 0, -1):
        if (n % 3 == 0):
            print(n, "üé°")
        if (n % 5 == 0):
            print(n, "üéÑ")
        if (n % 3 == 0 and n % 5 == 0):
            print(n, "üéÅ")


cuenta_regresiva(12)
'''Escribe una funci√≥n llamada sec_natal que reciba una lista de tuplas con el nombre de
una persona y su edad, y devuelva una lista con el nombre de las personas mayores de
edad (18 a√±os o m√°s). La lista debe estar ordenada de forma alfab√©tica'''

print("6. Secuencia de Navidad")


def sec_natal(lista: list):
    lista_mayores: list = []

    for datos in lista:
        if datos[1] > 17:
            lista_mayores.append(datos[0])

    lista_mayores.sort()

    print(lista_mayores)


sec_natal([("paco", 12), ("Jose", 23), ("Pedro", 55), ("Victor", 18)])

'''7. Resoluci√≥n de Sudoku (sin usar bibliotecas externas)
Crea una funci√≥n llamada resolver_sudoku que reciba una lista de listas representando
un tablero de Sudoku incompleto, con ceros (0) representando las casillas vac√≠as. La
funci√≥n debe intentar resolver el Sudoku, devolviendo el tablero resuelto. Si no es
posible resolver el Sudoku con los valores proporcionados, la funci√≥n debe devolver
None. El Sudoku debe respetar las reglas:
1. Cada fila debe contener los n√∫meros del 1 al 9 sin repetirse.
2. Cada columna debe contener los n√∫meros del 1 al 9 sin repetirse.
3. Cada una de las 9 subcuadr√≠culas de 3x3 debe contener los n√∫meros del 1 al 9
sin repetirse.'''


def resolver_sudoku(tablero):
    def es_valido(num, fila, col):
        for columna in range(9):
            if tablero[fila][columna] == num:
                return False
        for filas in range(9):
            if tablero[filas][col] == num:
                return False
        inicio_fila = (fila // 3) * 3
        inicio_col = (col // 3) * 3
        for r in range(inicio_fila, inicio_fila + 3):
            for c in range(inicio_col, inicio_col + 3):
                if tablero[r][c] == num:
                    return False
        return True

    def resolver():
        for fila in range(9):
            for col in range(9):
                if tablero[fila][col] == 0:
                    for num in range(1, 10):
                        if es_valido(num, fila, col):
                            tablero[fila][col] = num
                            if resolver():
                                return True
                            tablero[fila][col] = 0
                    return False
        return True

    if resolver():
        tablero_resuelto = tablero
        return print("\n", tablero_resuelto)
    else:
        return None


tablero_incompleto = [
    [5, 3, 4, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

# resolver_sudoku(tablero_incompleto)

'''Ejercicio cifrado'''
'''Cada letra del mensaje se convierte en un n√∫mero seg√∫n su posici√≥n en
el abecedario (A=1, B=2, ..., Z=26, ignorando may√∫sculas y min√∫sculas).
‚Ä¢ Los n√∫meros del mensaje cifrado se agrupan en bloques de tama√±o k.
‚Ä¢ Cada bloque se suma para generar un n√∫mero √∫nico por bloque.
‚Ä¢ Si un bloque tiene menos de k n√∫meros (es el √∫ltimo bloque), se calcula
solo con los n√∫meros que contiene.
Escribe un programa que contenga las siguientes funciones:
‚Ä¢ cifrar_mensaje(mensaje: str, k: int) -> list[int]: Recibe el mensaje original y
el tama√±o del bloque k y devuelve una lista de enteros con los valores
cifrados de cada bloque.
‚Ä¢ descifrar_mensaje(cifrado: list[int], k: int) -> str: Recibe la lista cifrada y el
tama√±o del bloque k, y reconstruye el mensaje original.
Adem√°s:
‚Ä¢ Ignora cualquier car√°cter que no sea una letra (como espacios, n√∫meros
o signos de puntuaci√≥n).
‚Ä¢ Devuelve el mensaje cifrado como una lista de n√∫meros y el descifrado
como texto.
Ejemplo:
Si el mensaje original es:
"Feliz Navidad!"
Y el tama√±o del bloque es k=3, entonces:
‚Ä¢ Convertimos el mensaje ignorando los caracteres no alfab√©ticos:
FelizNavidad ‚Üí [6, 5, 12, 9, 26, 14, 1, 22, 9, 4, 1, 4].
 Python
‚Ä¢ Agrupamos en bloques de tama√±o k=3:
[[6, 5, 12], [9, 26, 14], [1, 22, 9], [4, 1, 4]].
* Luego se tiene que descifrar
'''


#Lo primero que tenemos que hacer es quitar todos los caracteres que no son letras del abecedario
def quitar_cararteres(frase: str):
    resultado = re.sub(r'[^a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë]', '', frase)
    return resultado


#Luego de preparar la frase para que no tenga caracteres especiales tenemos que agrupar por el tama√±o en bloques
def letras_a_numeros(cadena):
    resultado = []
    for letra in cadena:
        # Convertir la letra a may√∫scula para manejar may√∫sculas y min√∫sculas
        letra = letra.lower()

        # Verificar si la letra est√° en el rango de 'A' a 'Z'
        if 'a' <= letra <= 'z':
            # Calcular el n√∫mero correspondiente
            numero = ord(letra) - ord('a') + 1
            resultado.append(numero)

    return resultado





def cifrado_supremo(frase: str, tamanio):
    frase_preparada = quitar_cararteres(frase)
    bloques = []
    for j in letras_a_numeros(frase_preparada):
        for i in range(0,tamanio):
            bloques.append(j)

    return bloques

def numeros_a_letras(numeros:list):
    resultado = ""
    for numero in numeros:
        if 1 <= numero <= 36:
            letra = chr(ord('a') + numero - 1)
            resultado += letra
    return resultado
print(cifrado_supremo("Viva el vino!!.",2))
print(numeros_a_letras(cifrado_supremo("Viva el vino!!.",1)))
